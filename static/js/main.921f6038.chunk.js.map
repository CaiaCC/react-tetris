{"version":3,"sources":["gameHelpers.js","img/bg.png","components/styles/StyledTetris.js","tetrominos.js","hooks/useStage.js","components/styles/StyledStage.js","components/styles/StyledCell.js","components/Cell.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","components/Tetris.js","hooks/usePlayer.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","index.js"],"names":["createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledTetrisWrapper","styled","div","bgImage","StyledTetris","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","tetrominos","randTetromino","Math","floor","random","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","map","row","cell","forEach","value","collided","reduce","ack","findIndex","prev","unshift","push","sweepRows","StyledStage","props","height","width","StyledCell","type","Cell","React","memo","Stage","StyledDispaly","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","Tetris","dropTime","setDropTime","setGameOver","setPlayer","rotate","matrix","dir","rotatedTetro","_","index","col","reverse","useCallback","STAGE_WIDTH","clonedPlayer","JSON","parse","stringify","offset","usePlayer","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","drop","console","log","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","move","keyCode","role","tabIndex","onKeyDown","e","onKeyUp","App","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.921f6038.chunk.js","sourcesContent":["export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\n\n// create the stage: a multi-dimension(nested) array that contains rows and columns(grid)\nexport const createStage = () =>\n    Array.from(Array(STAGE_HEIGHT), () =>\n        new Array(STAGE_WIDTH).fill([0, \"clear\"])\n    );\n\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\n    for (let y = 0; y < player.tetromino.length; y+= 1) {\n        for (let x = 0; x < player.tetromino[y].length; x+= 1) {\n        // 1. check that we're on an actual Tetromino cell\n            if (player.tetromino[y][x] !== 0) {\n                if (\n                // 2. check that our move is inside the stage height (y)\n                // we shouldn't go through the bottom of the stage\n                !stage[y + player.pos.y + moveY] ||\n                // 3. check that our move is inside the stage width (x)\n                !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\n                // 4. check that the cell we're moving to isn't set to clear\n                stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\n                    \"clear\"\n                ) {\n                return true;\n                }\n            }\n        }\n    }\n    // 5. If everything above is false\n    return false;\n};\n","export default __webpack_public_path__ + \"static/media/bg.d63cfd51.png\";","import styled from \"styled-components\";\n\nimport bgImage from \"../../img/bg.png\";\n\nexport const StyledTetrisWrapper = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background: url(${bgImage}) #000;\n  background-size: cover;\n  overflow: hidden;\n`\nexport const StyledTetris = styled.div`\n    display: flex;\n    align-items: flex-start;\n    padding: 40px;\n    margin: 0 auto;\n    max-width 900px;\n\n    aside {\n        width: 100%;\n        max-width: 200px;\n        display: block;\n        padding: 0 20px;\n    }\n`","export const TETROMINOS = {\n    0: { shape: [[0]], color: \"0, 0, 0\" },\n    I: {\n        shape: [\n            [0, \"I\", 0, 0],\n            [0, \"I\", 0, 0],\n            [0, \"I\", 0, 0],\n            [0, \"I\", 0, 0],\n        ],\n        color: \"80, 227, 230\",\n    },\n    J: {\n        shape: [\n            [0, \"J\", 0],\n            [0, \"J\", 0],\n            [\"J\", \"J\", 0],\n        ],\n        color: \"36, 95, 223\",\n    },\n    L: {\n        shape: [\n            [0, \"L\", 0],\n            [0, \"L\", 0],\n            [0, \"L\", \"L\"],\n        ],\n        color: \"223, 173, 36\",\n    },\n    O: {\n        shape: [\n            [\"O\", \"O\"],\n            [\"O\", \"O\"],\n        ],\n        color: \"223, 217, 36\",\n    },\n    S: {\n        shape: [\n            [0, \"S\", \"S\"],\n            [\"S\", \"S\", 0],\n            [0, 0, 0],\n        ],\n        color: \"48, 211, 56\",\n    },\n    T: {\n        shape: [\n            [0, 0, 0],\n            [\"T\", \"T\", \"T\"],\n            [0, \"T\", 0],\n        ],\n        color: \"132, 61, 198\",\n    },\n    Z: {\n        shape: [\n            [\"Z\", \"Z\", 0],\n            [0, \"Z\", \"Z\"],\n            [0, 0, 0],\n        ],\n        color: \"227, 78, 78\",\n    },\n};\n\nexport const randomTetromino = () => {\n    const tetrominos = \"IJLOSTZ\";\n    const randTetromino =\n        tetrominos[Math.floor(Math.random() * tetrominos.length)];\n    return TETROMINOS[randTetromino];\n};\n","import { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\n\nexport const useStage = (player, resetPlayer) => {\n    const [stage, setStage] = useState(createStage());\n    const [rowsCleared, setRowsCleared] = useState(0);\n\n    useEffect(() => {\n        setRowsCleared(0);\n\n        // create animation that clear a full row from the stage\n        const sweepRows = (newStage) =>\n        newStage.reduce((ack, row) => {\n          if (row.findIndex((cell) => cell[0] === 0) === -1) {\n            setRowsCleared((prev) => prev + 1);\n            ack.unshift(new Array(newStage[0].length).fill([0, \"clear\"]));\n            return ack;\n          }\n          ack.push(row);\n          return ack;\n        }, []);\n\n      const updateStage = (prevStage) => {\n            // First flush the stage\n            const newStage = prevStage.map((row) =>\n            row.map((cell) => (cell[1] === \"clear\" ? [0, \"clear\"] : cell))\n            );\n\n            // Then draw the tetromino\n            player.tetromino.forEach((row, y) => {\n                row.forEach((value, x) => {\n                    if (value !== 0) {\n                        newStage[y + player.pos.y][x + player.pos.x] = [\n                            value,\n                            `${player.collided ? \"merged\" : \"clear\"}`,\n                        ];\n                    }\n            });\n        });\n\n        // then check if we collided\n        if (player.collided) {\n          resetPlayer();\n          return sweepRows(newStage);\n        }\n\n        return newStage;\n      };\n\n      setStage((prev) => updateStage(prev));\n    }, [\n        player.collided,\n        player.pos.x,\n        player.pos.y,\n        player.tetromino,\n        resetPlayer,\n    ]);\n\n    return [stage, setStage, rowsCleared];\n}","import styled from 'styled-components';\n\nexport const StyledStage = styled.div`\n    display: grid;\n    grid-template-rows: repeat(\n        ${props => props.height},\n        calc(25vw / ${props => props.width})\n    );\n    grid-template-columns: repeat(${props => props.width}, 1fr);\n    grid-gap: 1px;\n    border: 2px solid #333;\n    width: 100%;\n    max-width: 25vw;\n    background: #111;\n`","import styled from 'styled-components';\n\nexport const StyledCell = styled.div`\n    width: auto;\n    background: rgba(${props => props.color}, 0.8);\n    border: ${props => (props.type === 0? '0px solid' : '4px solid')};\n    border-bottom-color: rgb(${props => props.color}, 0.1);\n    border-right-color: rgb(${props => props.color}, 1);\n    border-top-color: rgb(${props => props.color}, 1);\n    border-left-color: rgb(${props => props.color}, 0.3);\n`","import React from \"react\";\n\nimport { StyledCell } from \"./styles/StyledCell\";\nimport { TETROMINOS } from \"../tetrominos\";\n\nconst Cell = ({ type }) => (\n    <StyledCell type={type} color={TETROMINOS[type].color} />\n);\n\nexport default React.memo(Cell);\n","import React from 'react'\n\nimport { StyledStage } from './styles/StyledStage';\n\nimport Cell from './Cell';\n\nconst Stage = ({ stage }) => (\n    <StyledStage width={stage[0].length} height={stage.length}>\n        {stage.map((row) => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\n    </StyledStage>\n);\n\nexport default Stage;","import styled from 'styled-components';\n\nexport const StyledDispaly = styled.div`\n    box-sizing: border-box;\n    display: flex;\n    align-items: center;\n    margin: 0 0 20px 0;\n    padding: 20px;\n    border: 4px solid #333;\n    min-height: 30px;\n    width: 100%;\n    border-radius: 20px;\n    color: ${props => (props.gameOver ? 'red' : '#999')};\n    background: #000;\n    font-family: Pixel, Arial, Helvetica, sans-serif;\n    font-size: 0.8rem;\n`","import React from 'react';\n\nimport { StyledDispaly } from './styles/StyledDisplay';\n\nconst Display = ({ gameOver, text }) => (\n    <StyledDispaly gameOver ={gameOver}>{text}</StyledDispaly>\n);\n\nexport default Display;","import styled from 'styled-components';\n\nexport const StyledStartButton = styled.button`\n    box-sizing: border-box;\n    margin: 0 0 20px 0;\n    padding: 20px;\n    min-height: 30px;\n    width: 100%;\n    border-radius: 20px;\n    border: none;\n    color: white;\n    background: #333;\n    font-family: Pixel, Arial, Helvetica, sans-serif;\n    font-size: 1rem;\n    outline: none;\n    cursor: pointer;\n`","import React from 'react';\n\nimport { StyledStartButton } from './styles/StyledStartButton';\n\nconst StartButton = ({ callback }) => (\n    <StyledStartButton onClick={callback}>Start Game</StyledStartButton>\n)\n\nexport default StartButton;","import React, { useState } from 'react';\nimport { createStage, checkCollision } from '../gameHelpers';\n\nimport { StyledTetris, StyledTetrisWrapper } from './styles/StyledTetris';\n\nimport { usePlayer } from '../hooks/usePlayer';\nimport { useStage } from '../hooks/useStage';\nimport { useInterval } from '../hooks/useInterval';\nimport { useGameStatus } from '../hooks/useGameStatus';\n\nimport Stage from './Stage';\nimport Display from './Display';\nimport StartButton from './StartButton'\n\nconst Tetris = () => {\n    const [dropTime, setDropTime] = useState(null);  \n    const [gameOver, setGameOver] = useState(false);\n    \n    const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n    const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\n    const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared);\n\n    const movePlayer = dir => {\n        if (!checkCollision(player, stage, { x: dir, y: 0 })) {\n            updatePlayerPos({ x: dir, y: 0 });\n        }\n    }\n\n    const keyUp = ({ keyCode }) => {\n        if (!gameOver) {\n            if (keyCode === 40) {\n                setDropTime(1000 / (level + 1) + 200);\n            }\n        }\n    };\n\n    const startGame = () => {\n        // Reset everything\n        setStage(createStage());\n        setDropTime(1000);\n        resetPlayer();\n        setGameOver(false);\n        setScore(0);\n        setRows(0);\n        setLevel(0);\n    }\n\n    const drop = () => {\n        // Increase level when player has cleared 10 rows\n        if (rows > (level + 1) * 10) {\n            setLevel(prev => prev + 1);\n            // Increase the speed as level up\n            setDropTime(1000 / (level + 1) + 200);\n        }\n\n        if (!checkCollision(player, stage, { x: 0, y: 1 })) {\n            updatePlayerPos({ x: 0, y: 1, collided: false });\n        } else {\n            // game over\n            if (player.pos.y < 1) {\n                console.log(\"GAME OVER!!\");\n                setGameOver(true);\n                setDropTime(null);\n            }\n            updatePlayerPos({ x: 0, y: 0, collided: true });\n        }\n            \n    }\n\n    const dropPlayer = () => {\n        setDropTime(null);\n        drop();\n    }\n\n    useInterval(() => {\n        drop();\n    }, dropTime);\n\n    const move = ({ keyCode }) => {\n        if (!gameOver) {\n            if (keyCode === 37) {\n                movePlayer(-1);\n            } else if (keyCode === 39) {\n                movePlayer(1);\n            } else if (keyCode === 40) {\n                dropPlayer();\n            } else if (keyCode === 38) {\n                playerRotate(stage, 1);\n            }\n        }\n    }\n\n\n    return (\n      <StyledTetrisWrapper\n        role=\"button\"\n        tabIndex=\"0\"\n        onKeyDown={(e) => move(e)}\n        onKeyUp={keyUp}\n      >\n        <StyledTetris>\n          <Stage stage={stage} />\n          <aside>\n            {gameOver ? (\n              <Display gameOver={gameOver} text=\"Game Over\" />\n            ) : (\n              <div>\n                <Display text={`Score: ${score}`} />\n                <Display text={`Rows: ${rows}`} />\n                <Display text={`Level: ${level}`} />\n              </div>\n            )}\n            <StartButton callback={startGame} />\n          </aside>\n        </StyledTetris>\n      </StyledTetrisWrapper>\n    );\n};\n\nexport default Tetris;","import { useState, useCallback } from 'react';\n\nimport { randomTetromino, TETROMINOS } from \"../tetrominos\";\nimport { checkCollision, STAGE_WIDTH } from '../gameHelpers';\n\nexport const usePlayer = () => {\n    const [player, setPlayer] = useState({\n        pos: { x: 0, y: 0 },\n        tetromino: TETROMINOS[0].shape,\n        collided: false,\n    });\n\n    const rotate = (matrix, dir) => {\n        // make rows become columns (transpose)\n        const rotatedTetro = matrix.map((_, index) => matrix.map(col => col[index]));\n        // reverse each row to get a rotated matrix\n        if (dir > 0) {\n            return rotatedTetro.map(row => row.reverse());\n        }\n        return rotatedTetro.reverse();\n    }\n\n    const playerRotate = (stage, dir) => {\n        const clonedPlayer = JSON.parse(JSON.stringify(player)); // deep copy\n        clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n        \n        const pos = clonedPlayer.pos.x;\n        let offset = 1;\n\n        while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\n            clonedPlayer.pos.x += offset;\n            offset = -(offset + (offset > 0 ? 1 : -1));\n            \n            if (offset > clonedPlayer.tetromino[0].length) {\n                rotate(clonedPlayer.tetromino, -dir);\n                clonedPlayer.pos.x = pos;\n                return;\n            }\n        }\n\n        setPlayer(clonedPlayer);\n    }\n\n    const updatePlayerPos = ({ x, y, collided }) => {\n        setPlayer(prev => ({\n            ...prev,\n            pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\n            collided,\n        }));\n    }\n\n    const resetPlayer = useCallback(() => {\n        setPlayer({\n            pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n            tetromino: randomTetromino().shape,\n            collided: false,\n        });\n    }, []);\n\n    return [player, updatePlayerPos, resetPlayer, playerRotate];\n}","import { useState, useEffect, useCallback } from 'react';\n\nexport const useGameStatus = rowsCleared => {\n    const [score, setScore] = useState(0);\n    const [rows, setRows] = useState(0);\n    const [level, setLevel] = useState(0);\n\n    const linePoints = [40, 100, 300, 1200];\n\n    const calcScore = useCallback(() => {\n        if (rowsCleared > 0) {\n            setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\n            setRows(prev => prev + rowsCleared);\n        }\n    }, [level, linePoints, rowsCleared]);\n\n    useEffect(() => {\n        calcScore();\n    }, [calcScore, rowsCleared, score])\n\n    return [score, setScore, rows, setRows, level, setLevel];\n}\n","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n    const savedCallback = useRef();\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n        if (delay !== null) {\n            const id = setInterval(tick, delay);\n            return () => {\n                clearInterval(id);\n            };\n        }\n    }, [delay]);\n}\n","import React from 'react';\n\nimport Tetris from './components/Tetris'\n\nconst App = () => (\n    <div className='App'>\n        <Tetris />\n    </div>\n);\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}